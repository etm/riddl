#!/usr/bin/ruby
require '../../lib/ruby/client'
require 'rubygems'
require 'xml/smart'


client = Riddl::Client.new("http://localhost:9290")

create = true
validate = true
delete = true
update = true
rename = true

ARGV.each do |a|
  case a
    when "--skip-create" then create = false
    when "--skip-delete" then delete = false
    when "--skip-validate" then validate = false
    when "--skip-update" then update = false
    when "--skip-rename" then rename = false
    else puts "Unknown command #{a}"; exit
  end
end

# Testcases for adding resources
puts "Skip ceate-tests" if !create
if create
puts "Starting create-tests"
# {{{
expectation = 501
test = "Creating group with a invalide XML (expected status: #{expectation})"
# {{{
status, response = client.resource("groups").post [
      Riddl::Parameter::Simple.new("group-name", "testclient-group-invalide-xml"),
      Riddl::Parameter::Complex.new("domain-description", "text/xml", File.open("example-cinema/service.xml", "r"))
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 201
test= "Creating group with valide XML (expected status: #{expectation})"
# {{{
status, response = client.resource("groups").post [
      Riddl::Parameter::Simple.new("group-name", "testclient-group"),
      Riddl::Parameter::Complex.new("domain-description", "text/xml", File.open("example-cinema/group.xml", "r"))
      ]
status, response = client.resource("groups").post [
      Riddl::Parameter::Simple.new("group-name", "testclient-group-exists"),
      Riddl::Parameter::Complex.new("domain-description", "text/xml", File.open("example-cinema/group.xml", "r"))
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 409
test = "Creating group with a name that already exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups").post [
      Riddl::Parameter::Simple.new("group-name", "testclient-group"),
      Riddl::Parameter::Complex.new("domain-description", "text/xml", File.open("example-cinema/group.xml", "r"))
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}


expectation = 201
test = "Creating subgroup (expected status: #{expectation})"
# {{{zo 
status, response = client.resource("groups/testclient-group").post [
      Riddl::Parameter::Simple.new("subgroup-name", "testclient-subgroup")
      ]
status, response = client.resource("groups/testclient-group").post [
      Riddl::Parameter::Simple.new("subgroup-name", "testclient-subgroup-exists")
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 409
test = "Creating subgroup with a name that already exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group").post [
      Riddl::Parameter::Simple.new("subgroup-name", "testclient-subgroup")
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}


expectation = 415
test = "Creating service with invalide XML (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group/testclient-subgroup/").post [
      Riddl::Parameter::Simple.new("service-name", "testclient-service-invalide-xml"),
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/group.xml", "r"))
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 201
test = "Creating service with valide XML (expected status: #{expectation})"
# {{{ 
status, response = client.resource("groups/testclient-group/testclient-subgroup").post [
      Riddl::Parameter::Simple.new("service-name", "testclient-service"),
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/service.xml", "r"))
      ]
status, response = client.resource("groups/testclient-group/testclient-subgroup").post [
      Riddl::Parameter::Simple.new("service-name", "testclient-service-exists"),
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/service.xml", "r"))
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 409
test = "Creating service with a name that already exists (expected status: #{expectation})"
# {{{ 
status, response = client.resource("groups/testclient-group/testclient-subgroup").post [
      Riddl::Parameter::Simple.new("service-name", "testclient-service"),
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/service.xml", "r"))
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}
end
# }}}

# Testcases for requesting reources
puts "Skip validation" if !validate
if validate
puts "Starting validation-test"
# {{{
test = "Validating serviceSchema against service-properties"
status, response = client.resource("groups/testclient-group").get [Riddl::Parameter::Simple.new("service-schema","")]
schema = XML::Smart.string(response[0].value.read)
puts test + " failed during requesting properties schema with status-code: #{status}" if status != 200
status, response = client.resource("groups/testclient-group/testclient-subgroup/testclient-service").get []
xml = XML::Smart.string(response[0].value.read)
puts "\tTesting serviceSchema"
puts test + " failed during requesting service-properties with status-code: #{status}" if status != 200
puts test + " failed because schema does not match against xml"  if xml.validate_against(schema) == false

# Looping through each operation and check if messages are valid
status, response = client.resource("groups/testclient-group/operations").get []
schema = XML::Smart.string(response[0].value.read)
operations = schema.find("//group:operation", {"group" => "http://rescue.org/ns/group/0.2"})

operations.each do |o|
  operation =  o.attributes.get_attr("name")
  puts "\tTesting #{operation}-input-message"
  message ="Validating \"example-cinema/#{operation}-input.xml\" against schema for input"
  status, response = client.resource("groups/testclient-group/operations/#{operation}").get [Riddl::Parameter::Simple.new("input","")]
  schema = XML::Smart.string(response[0].value.read)
  puts test + " failed during requesting input-message schema for #{operation} with status-code: #{status}" if status != 200
  xml = XML::Smart.open("example-cinema/#{operation}-input.xml")
  puts message + " failed" if xml.validate_against(schema) == false
  message ="Validating \"example-cinema/#{operation}-output.xml\" against schema for output"
  puts "\tTesting #{operation}-output-message"
  status, response = client.resource("groups/testclient-group/operations/#{operation}").get [Riddl::Parameter::Simple.new("output","")]
  schema = XML::Smart.string(response[0].value.read)
  puts test + " failed during requesting output-message schema for #{operation} with status-code: #{status}" if status != 200
  xml = XML::Smart.open("example-cinema/#{operation}-output.xml")
  puts message + " failed" if xml.validate_against(schema) == false
end
end
# }}}


# Testcases for updating
puts "Skip updating-tests" if !update
if update
# {{{ 
expectation = 415
test = "Updating service with invalide XML (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group/testclient-subgroup/testclient-service").put [
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/group.xml", "r"))
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 200
test = "Updating service with valide XML (expected status: #{expectation})"
# {{{ 
status, response = client.resource("groups/testclient-group/testclient-subgroup/testclient-service").put [
      Riddl::Parameter::Complex.new("service-description", "text/xml", File.open("example-cinema/service.xml", "r"))
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}
end
# }}}


# Testcases for renaming resources
puts "Skip rename-tests" if !rename
if rename
# {{{ 
expectation = 200
test = "Renaming group (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group/").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-group-renamed")
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 200
test = "Renaming subggroup (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-subgroup-renamed")
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 200
test = "Renaming service (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-renamed/testclient-service").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-service-renamed")
      ]
if status != expectation      
puts test + " failed with error: #{status}"
rename = false
update = false
validate = false
delete = false
end
# }}}

expectation = 410
test = "Renaming group with a name that not exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-group-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 410
test = "Renaming subggroup with a name that not exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-subgroup-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 410
test = "Renaming service with a name that not exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-renamed/testclient-service").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-service-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 409
test = "Renaming group with a name that already exists (expected status: #{expectation})"
# {{{ 
status, response = client.resource("groups/testclient-group-exists").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-group-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 409
test = "Renaming subggroup with a name that already exists (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-exists").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-subgroup-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}} 

expectation = 409
test = "Renaming service with a name that already exists (expected status: #{expectation})"
# {{{  
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-renamed/testclient-service-exists").put [
      Riddl::Parameter::Simple.new("new-name", "testclient-service-renamed")
      ]
puts test + " failed with error: #{status}" if status != expectation
# }}}
end
# }}}



# Testcases for deleting resources
puts "Skip delete-test" if !delete
if delete
puts "Starting delete-tests"
# {{{
expectation = 200
test= "Deleting service (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-renamed/testclient-service-renamed").delete []
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 200
test= "Deleting subgroup (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed/testclient-subgroup-renamed").delete []
puts test + " failed with error: #{status}" if status != expectation
# }}}

expectation = 200
test= "Deleting group (expected status: #{expectation})"
# {{{
status, response = client.resource("groups/testclient-group-renamed").delete []
status, response = client.resource("groups/testclient-group-exists").delete []
puts test + " failed with error: #{status}" if status != expectation
# }}}
end
# }}}
