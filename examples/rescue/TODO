RESUCE: open tasks
==================


*) Connect RESCUE via subscriptions to CPEE
  -> Handler subscribes RESCUE whenever an injection is nedded, afterwards the subsription will be removed - OK
    # All injections are now deoensing on subsriptions
    # Also a monitor to avoid more than one inkjections at a time on the same instance is impelemnted

*) RESCUE log's into CPEE
  -> Log what nodes are injected by this step
    # e.g. "Injection caused by a01 results in a01_find, a01_select, a01_book", "Injection caused by a02 has no fitting services explored", ...

*) Log if WF is in a state where it could not be executed any further (class and instance level)
    # I think there is an CPEE function necessary
      + Message works in CPEE (only for programmatic/technical erros during injection)
      + Semantic control of the workflow is in behalv of the designer and executed using status-codes in the result object"

*) REST-Api of RESCUE validation
  -> Input- and output messages - Generation: OK
    # Validation of the in- and output during runtime necessary? When yes, should it be performed within the handler?
      + No, everything will be controled by the client
  -> Schemes needs to be updated
  -> Properties interface - OK
  -> Additional endpoints must be provided in the schema - OK

*) Extend RESCUE instruction-set to provide same features as CPEE

*) Check where and how properties are and should (not) be accessible on user-, class- and instance-level

*) Implement a selection service using the callback function of CPEE
  -> an URI should be polled from the client where the data is formated as given in group-by parameters

*) Should the context and endpoints be cleaned up after an injected block is finished? - OK
  -> PRO: context is not exploding in number
  -> CONTRA: historical information about the results are lost (are they of interest for any repair service?)

*) Cinemas-Example:
  -> Show the whole controlflow-set provided by RESCUE (call, manipulate, loop, critical, parallel)
    # Use if to check if search leaded to results on class-level
  -> Show properties dependencies between two calls

*) Injection within a loop? 
  -> How schould this be handeled in a strictly progressiv way?
    # Injection will use a similar algoritm as loop enrolment in CPU's
      + Ci in loop
      + Start Position will be after Ci
      + block up to the first loop will be injected strictly before the loop starts
      + if post_condition => convert it to a pre_condition

*) ATOM-Feed extended with an XSL to generate a better UI
