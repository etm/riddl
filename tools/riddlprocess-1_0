#!/usr/bin/ruby 
require 'rubygems'
require File.dirname($0) + '/../lib/ruby/riddl'
require 'optparse'
require 'pp'

verbose = false
ARGV.options { |opt|
  opt.summary_indent = ' ' * 2
  opt.banner = "Usage:\n#{opt.summary_indent}#{File.basename($0)} [options] [FILENAME]\n"
  opt.on("Options:")
  opt.on("--help", "-h", "This text") { puts opt; exit }
  opt.on("--verbose", "-v", "Write ouput to console") { verbose = true }
  opt.on("Filename is either a description or a declaration.")
  opt.parse!
}
$stderr.close unless verbose
if ARGV.length == 0 || !File.exists?(ARGV[0])
  puts ARGV.options
  exit
end
fname = ARGV[0]

riddl = Riddl::open(fname)

unless riddl.declaration?
  puts 'Not a RIDDL declaration.'
  exit
end
unless riddl.validate!
  puts "Does not conform to specification#{verbose ? '' : ', use -v for details'}."
  exit
end
puts "RIDDL declaration looks valid."

def get_path(d,routes,first=false)
  d.find("des:resource/des:*[@in and @out and not(@in='*')]").each do |m|
    if first
      routes[m.name.name] ||= {}
      routes[m.name.name][m.attributes['in']] ||= []
      routes[m.name.name][m.attributes['in']] << m.attributes['out']
    else  
      routes[m.name.name].each do |k,v|
        v << m.attributes['out'] if v.last == m.attributes['in']  
      end
    end  
  end
  false
end

riddl.find("/dec:declaration/dec:interface").each do |ifa|
  routes = {}
  first = true
  ifa.find("des:description|dec:filter/des:description").each do |d|
    first = get_path(d,routes,first)
  end
  pp routes
end
