#!/usr/bin/ruby 
curpath = __FILE__
while ::File::symlink?(curpath)
  curpath = ::File::dirname(curpath) + '/' + ::File::readlink(curpath)
end  
require 'rubygems'
require ::File::dirname(curpath) + "/../lib/riddl/wrapper"
require 'optparse'
require 'pp'

dowhat = nil
ARGV.options { |opt|
  opt.summary_indent = ' ' * 2
  opt.banner = "Usage:\n#{opt.summary_indent}#{File.basename($0)} [options] [FILENAME]\n"
  opt.on("Options:")
  opt.on("--help", "-h", "This text.") { puts opt; exit }
  opt.on("--vtl", "-l", "For each tile visualize the resource tree and the layers.") { dowhat = "layers" }
  opt.on("--vtc", "-c", "For each tile visualize the resource tree and the resulting compositions.") { dowhat = "compositions" }
  opt.on("--vf", "-f", "Visualize the resulting facade.") { dowhat = "facade" }
  opt.on("--description", "-d", "Return the XML description for the facade.") { dowhat = "description" }
  opt.on("Filename has to be a declaration.")
  opt.parse!
}
if ARGV.length == 0 || !File.exists?(ARGV[0]) || dowhat.nil?
  puts ARGV.options
  exit
end
fname = ARGV[0]

riddl = Riddl::Wrapper.new(fname)

unless riddl.declaration?
  puts 'Not a RIDDL declaration.' 
  exit
end
unless riddl.validate!
  puts "Does not conform to specification."
  exit
end

d = riddl.declaration
case dowhat
  when 'layers'
    d.visualize_tiles_and_layers
  when 'compositions'
    d.visualize_tiles_and_compositions
  when 'facade'
    d.visualize_facade
  when 'description'
    puts d.description_xml(true)
end 
